{"name":"Espnrb","body":"# EspnRb\r\n\r\nA ruby wrapper for the ESPN api.  It allows you to interact, in a semantically pleasing way, with the ESPN api.  Currently it only allows access to the publicly available Headline API which can be found [here](http://developer.espn.com/docs/headlines).  I am working to bring more of ESPN's features to espn_rb.  While I do that I'll try to keep this document updated to its current functionality.  That said, I hope you enjoy.\r\n\r\n![ESPN api logo](http://a.espncdn.com/i/apis/attribution/espn-api-black_200.png \"See more branding options at developer.espn.com/branding\")  in mind.  ^_^\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem \"espn_rb\"\r\n\r\nIn order to use espn_rb you need to first get an API key from ESPN [ESPN api request](http://developer.espn.com/member/register).  Once you've gotten that squared away you can use the public requests straight away.\r\n\r\n\r\n## Set your API key\r\n\r\nThe easiest way to set your api key for use with espn_rb is to export it as an environment variable. Do that like so:\r\n\r\n```sh\r\n $ export espn_api_key=YOUR_SUPER_SECRET_API_KEY\r\n```\r\n\r\nIf you want to pass it in to your objects you may do so explicitly like so:\r\n\r\n```ruby\r\n  espn = EspnRb.headlines(:api_key => YOUR_SUPER_SECRET_API_KEY)\r\n```\r\n\r\nFor the sake of simplicity all my examples will assume that you have exported the API key as an environment variable.\r\n\r\n## Espn Headines\r\n\r\nInstantiate the EspnRb object and check the headlines.\r\n\r\n#### Get all headlines\r\n\r\n```ruby\r\nrequire 'espn_rb'\r\nespn = Espn.headlines\r\n\r\nespn.all\r\n#=> HeadlineResponse\r\n```\r\n\r\nWhich will return an HeadlineResponse object.\r\n\r\n#### Get ESPN response as a hash\r\n\r\nTo get the response straight from the horses' mouth:\r\n\r\n```ruby\r\n# from above\r\n\r\nespn.all.response\r\n#=> ESPN's response string as a hash\r\n```\r\n\r\nThe raw response from ESPN will give you the top ten stories meeting your criteria.\r\n\r\n### HeadlineResponse\r\n\r\nNow includes Enumerable which allows you to treat the HeadlineResponse as an iterable object.\r\n\r\n```ruby\r\nespn = EspnRb.headlines\r\nespn.all.map(&:title)\r\n\r\n#=> [\"Celtics-Clippers Preview\",\r\n#    \"Warriors 97, Clippers 93\",\r\n#    \"Hawks 106, Kings 99\",\r\n#    \"Warriors-Clippers, Box\",\r\n#    \"Warriors 97, Clippers 93\",\r\n#    \"Hawks 106, Kings 99\",\r\n#    \"Bucks-Nets Preview\",\r\n#    \"Hawks-Kings, Box\",\r\n#    \"Grizzlies 94, Nuggets 91\",\r\n#    \"Grizzlies-Nuggets, Box\"]\r\n\r\n```\r\n\r\n#### Collections\r\n\r\nSince the above response is a basic collection and each headline share many common attributes there are collection methods defined on the HeadlineResponse object.  Use them like so.\r\n\r\n```ruby\r\n# from above\r\n\r\n# Available methods are [headlines descriptions sources bylines types]\r\n\r\nespn.all.response.titles\r\n#=> [\"array\", \"of\", \"ESPN\", \"titles\"]\r\n\r\nespn.all.response.descriptions\r\n#=> [\"array\", \"of\", \"ESPN\", \"descriptions\"]\r\n\r\n# etc...\r\n```\r\n\r\n#### API methods\r\n\r\nWhen calling on the api to get new data you can pass any (soon) of the methods supported by the API.\r\n\r\n```ruby\r\nespn = EspnRb.headlines\r\n\r\nespn.nba(:news) #=> HeadlineResponse\r\nespn.nba(:top)  #=> HeadlineResponse\r\nespn.nba(:for_date => \"2012-03-09\")  #=> HeadlineResponse # Will include all stories for that date\r\nespn.nba(:for_athlete => \"1234\")     #=> HeadlineResponse # Will include all stories for that athleteId\r\n\r\n```\r\n\r\n### HeadlineItem\r\n\r\nThe HeadlineResponse Object holdes in it the headlines split into HeadlineItems.  Here is where you can get Specific information about each story.  Some of the options are:\r\n\r\n```ruby\r\nespn = EspnRb.headlines\r\nheadline_item = espn.nba[2] #=> HeadlineItem\r\n\r\nheadline_item.web_url #=> \"http://sports.espn.go.com/espn/wire?section=nba&id=7664408&ex_cid=espnapi_public\"\r\nheadline_item.id #=> 7664408\r\nheadline_item.title #=> \"Mavericks-Kings Preview\"\r\nheadline_item.athletes #=> [\"Johnny B\", \"Freddie Flintstone\", \"Etc\"]\r\nheadline_item.leagues #=> [\"46\"]\r\nheadline_item.athlete_ids #=> [\"123\", \"132\", \"123\"]\r\n\r\n# More to come in future versions.\r\nheadline_response.headline #=> JSON hash from original response.\r\n```\r\n\r\nHeadlineItem will now also respond to #images which will return an HeadlineResponse::HeadlineItem::Images class which contains the images associated with the HeadlineItem in a class that is also enumerable which lets you access the images with nice little methods like:\r\n\r\n```ruby\r\nespn = EspnRb.headlines\r\nheadline_item = espn.nfl[2]\r\n\r\nheadline_item.images => HeadlineResponse::HeadlineItem::Images\r\n\r\n# or to actually use the images\r\n\r\nimages = headline_item.images\r\n\r\nimages.first.landscape #=> true\r\nimages.first.url #=> http://path-to-img.com/blah-blah-blah\r\n\r\n# or list all the urls\r\n\r\nimages.map(&:url) #=>  [\"list\", \"of\", \"image\", \"urls\"]\r\n```\r\n#### HELP\r\n\r\n```ruby\r\nespn = Espn.headlines\r\nespn.help\r\n#=> methods/descriptions below....\r\n```\r\nYou are currently using the headlines api from here you can do the follow:\r\n\r\n    Method                    Description\r\n\r\n\t:all                      News across all sports/sections\r\n\t:golf                     Golf\r\n\t:boxing                   Boxing\r\n\t:mma                      Mixed Martial Arts\r\n\t:racing                   Auto Racing\r\n\t:soccer                   Professional soccer (US focus)\r\n\t:tennis                   Tennis\r\n\t:mlb                      Major League Baseball (MLB)\r\n\t:nba                      National Basketball Association (NBA)\r\n\t:nfl                      National Football League (NFL)\r\n\t:nhl                      National Hockey League (NHL)\r\n\t:nascar                   NASCAR racing\r\n\t:wnba                     Women's National Basketball Association (WNBA)\r\n\t:ncaa_basketball          NCAA Men's College Basketball\r\n\t:ncaa_football            NCAA College Football\r\n\t:ncaa_womens_basketball   NCAA Women's College Basketball\r\n\r\n\r\n\r\n---\r\nI am actively work on this. Check the commit log to see where I'm at, and check the issues to see how you can contribute.\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request","tagline":"Ruby wrapper for the ESPN api.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}